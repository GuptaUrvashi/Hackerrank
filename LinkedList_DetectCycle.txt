/*
Detect a cycle in a linked list. Note that the head pointer may be 'null' if the list is empty.

A Node is defined as: 
    class Node {
        int data;
        Node next;
    }
*/

boolean hasCycle(Node head) {
    if(head == null){
        return false;
    }
    
    Node slow, fast;
    slow = fast = head;
    
    while(true){
        slow = slow.next; // 1 hop
        
        if(fast.next != null){
        fast = fast.next.next; //2 hop
        } else
            return false;
        
        if(fast == null || slow ==null) {
            return false;
        }
        if(fast==slow){
            return true;
        }
    }
   
   

}
